{"version":3,"sources":["Components/RaceTrack/RaceTrack.js","Components/Race/Race.js","Components/PlayerBet/PlayerBet.js","utils/api.js","Hooks/useQuiz.js","Hooks/usePlayer.js","Components/PlayerSelectScreen/PlayerSelectScreen.js","Components/MultipleChoiceQuestion/MultipleChoiceQuestion.js","Components/Countdown/Countdown.js","Components/GameScreen/GameScreen.js","Components/WinScreen/WinScreen.js","App.js","serviceWorker.js","index.js"],"names":["RaceTrack","player","position","submitted","className","name","alive","src","process","Array","map","_","index","key","score","icon","Race","players","positions","answers","console","log","find","ans","PlayerBet","currentBet","onBetChange","onChange","v","horizontal","value","API_URL","postAPI","endpoint","body","fetch","method","JSON","stringify","headers","useQuiz","useState","quizState","setQuizState","useEffect","interval","setInterval","then","r","json","getAPI","state","clearInterval","bet","correct","answer","usePlayer","setPlayer","cachedPlayer","localStorage","getItem","submitJoined","submitLeft","setItem","PlayerSelectScreen","onPlayerSelect","selectedPlayer","selectPlayer","p","joined","onClick","MultipleChoiceQuestion","question","onSubmit","difficulty","category","Countdown","time","setTime","setTimeout","Math","max","GameScreen","onSubmitAnswer","onSetBet","playerAnswer","currentAnswers","playerScore","scores","s","currentState","currentQuestion","correctAnswer","user","WinScreen","winner","App","setBet","submitAnswer","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8dc53260.chunk.js","sourcesContent":["import React from 'react'\nimport './RaceTrack.scss'\n\nexport default function RaceTrack({ player, position , submitted}) {\n\n    return (\n        <div className='race-track-outer'>\n            <h3 className={`${submitted ? 'submitted' :''}`}>{player.name} {!position.alive && <span>are in the slammer</span>} </h3>\n            {position.alive ? \n            <div className='race-track'>\n                <div className='space'>\n                    <img src={`${process.env.PUBLIC_URL}/police.png`} />\n                </div>\n                {[...Array(10)].map((_, index) => (\n                    <div key={index} className={`space ${index}`}>\n                        {index === position.score &&\n                            <img src={player.icon} />\n                        }\n                    </div>\n                ))}\n            </div>\n            :\n            <div className='jail'>\n                <div className='bars'>\n                    {[...Array(10)].map(()=>\n                        <div className='bar'/>\n                    )}\n                </div>\n                <img src={player.icon}/>\n            </div>\n            }   \n        </div>\n    )\n}","import React from 'react'\nimport RaceTrack from '../RaceTrack/RaceTrack'\nexport default function Race({ players, positions, answers }) {\n    console.log(\"players are \", players, 'positions are ', positions)\n    return (\n        <div className='race'>\n            {players.map((player) => (\n                <RaceTrack \n                player={player} \n                position={positions.find(position => position.name===player.name)} \n                key={player.name}\n                submitted= {answers.find(ans => ans.name=== player.name)} />\n            ))}\n        </div>\n    )\n}","import React from 'react'\nimport './PlayerBet.scss'\n\nimport {RadioGroup, RadioButton, ReversedRadioButton} from 'react-radio-buttons'\n\n\nexport default function PlayerBet({currentBet, onBetChange}){\n    return(\n        <div className='player-bet'>\n            <RadioGroup onChange={ (v) => onBetChange(v)} horizontal value={currentBet}>\n                <RadioButton value=\"coast\">\n                    Coast (+/- 1)\n                </RadioButton>\n                <RadioButton value=\"accelerate\">\n                    Accelerate (+/-2)\n                </RadioButton>\n                \n            </RadioGroup>\n        </div>\n    )\n}","\n// const API_URL = 'http://localhost:5000'\nconst API_URL = process.env.NODE_ENV ==='production' ? 'https://famquiz.herokuapp.com' : 'http://localhost:5000'\n\nexport const postAPI = (endpoint, body)=>{\n    console.log(\"POSITNG to \", API_URL+'/getaway/'+endpoint )\n    return fetch(API_URL+'/getaway/'+endpoint,{\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    })\n}\n\nexport const getAPI = (endpoint='')=>{\n    return fetch(API_URL+'/getaway/'+endpoint).then(r=>r.json())\n}","import {useState,useEffect} from 'react'\nimport {getAPI,postAPI} from '../utils/api'\n\nexport const useQuiz = ()=>{\n    const [quizState,setQuizState] = useState(null)\n\n    useEffect(()=>{\n        const interval = setInterval(()=>{\n            getAPI().then(state=>{\n                setQuizState(state)\n            })\n        }, 500)\n        return ()=> clearInterval(interval)\n    },[])\n\n    const submitAnswer = (player,bet,correct,answer )=>{\n        postAPI('answer', {name: player, bet, correct, answer })\n    }\n\n    return [quizState, submitAnswer]\n}","import {useState, useEffect} from 'react'\nimport {postAPI} from '../utils/api'\n\nexport const usePlayer =()=>{\n    const [player, setPlayer] = useState(null)\n\n\n    useEffect(()=>{\n        const cachedPlayer = localStorage.getItem('player')\n        if(cachedPlayer){\n            setPlayer(cachedPlayer)\n            submitJoined(cachedPlayer)\n        }\n    },[])\n\n\n    const submitJoined = (player)=>{\n        if(player!=='viewer'){\n            postAPI('join', {name: player })\n        }\n    }\n\n    const submitLeft = (player)=>{\n        if(player!=='viewer'){\n            postAPI('left', {name: player })\n        }\n    }\n\n    const updatePlayer = (name)=>{\n        if(player){\n            submitLeft(player)\n        }\n        submitJoined(name)\n        setPlayer(name)\n        localStorage.setItem('player', name )\n    }\n\n    return [player, updatePlayer]\n}","import React from 'react'\nimport './PlayerSelectScreen.scss'\n\nexport default function PlayerSelectScreen({players, onPlayerSelect, selectedPlayer}){\n\n    const selectPlayer = (name)=>{\n        if(name==='viewer'){\n            onPlayerSelect(name)\n        }\n        if( name!=='viewer' && !players.find(p=>p.name === name).joined ){\n            onPlayerSelect(name)\n        }\n    }\n    return(\n        <div className='player-select-screen'>\n            {selectedPlayer ?\n            <h1>Waiting for others to join</h1>\n            : \n             <h1>Select your player</h1>\n            }\n\n            <div className='players'>\n                {players.map(player=>\n                    <div onClick={()=>selectPlayer(player.name)} className={`player ${player.joined && 'joined'} ${selectedPlayer === player.name ? 'selected' : ''} `}>\n                        <img src={player.icon} />\n                        <h3>{player.name}</h3>\n                    </div>  \n                )}\n\n                <h1 className={selectedPlayer==='viewer' ? 'joined' : ''} onClick={()=> selectPlayer('viewer')}>Viewer</h1>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport \"./MultipleChoiceQuestion.scss\"\n\n\nexport default function MultipleChoiceQuestion({question, onSubmit}){\n    \n    return(\n        <div className='multiple-choice-question'>\n            <h3 className='category'>{question.difficulty} - {question.category}</h3>\n            <h2 className='question'>{question.question}</h2>\n            <div className='answers'>\n                {question.answers.map(answer=> <button key={answer} onClick={()=>onSubmit(answer)} >{answer}</button>)}\n            </div>\n        </div>\n    )\n}","import React, {useEffect,useState} from 'react'\nimport './Countdown.scss'\n\n\nexport default function Countdown(){\n    const [time, setTime ] = useState(5)\n\n    useEffect(()=>{\n        if(time >0){\n             setTimeout(()=> setTime(Math.max(0,time-1)), 1000)\n        }\n        // return ()=> clearInterval(inter)\n    },[time])\n    return (\n        <div className='countdown'>\n            <h3>Next Question in...</h3>\n            <h1>{time}</h1>\n        </div>\n    )\n}","import React from 'react'\nimport MultipleChoiceQuestion from '../MultipleChoiceQuestion/MultipleChoiceQuestion'\nimport Race from '../Race/Race'\nimport PlayerBet from '../PlayerBet/PlayerBet'\nimport Countdown from '../Countdown/Countdown'\n\nimport './GameScreen.scss'\n\nexport default function GameScreen({quizState, player, onSubmitAnswer, bet, onSetBet}){\n    const playerAnswer  = quizState.currentAnswers.find(ans => ans.name === player)\n    const playerScore   = quizState.scores.find(s => s.name === player)\n    console.log(\"player score \", playerScore)\n    console.log('plaer is ', player)\n    return (\n        <div className='race-screen'>\n            <Race players={quizState.players} \n                positions={quizState.scores}\n                answers = {quizState.currentAnswers} />\n                { (quizState.currentState === 'show_question' &&  (player==='viewer' || (playerScore && playerScore.alive) )) && \n\n                    <>\n                     {playerAnswer ?\n                        <div className='submitted-answer'>\n                            <h3>You answered </h3> \n                            <h1>{playerAnswer.answer}</h1>\n                            <h3>At speed</h3>\n                            <h1> {bet}</h1>\n                        </div>\n                     \n                     :\n                     <div className='question-entry'>\n                         \n                        <MultipleChoiceQuestion \n                            question={quizState.currentQuestion} \n                            onSubmit={onSubmitAnswer}\n                        />\n                        {player !=='viewer' && \n                            <PlayerBet \n                                currentBet= {bet} \n                                onBetChange={onSetBet} \n                                />\n                        }\n                            </div>\n                     \n                     }\n                     </>\n                }\n\n                { (quizState.currentState === 'show_question' && playerScore && !playerScore.alive) &&\n                    <h1>You got caught by the police and locked up</h1>\n                }\n\n                {quizState.currentState ==='show_answer' &&\n                    <div className='answers'>\n                        \n                        <h3>The correct Answer was</h3>\n                        <h1>{quizState.currentQuestion.correctAnswer}</h1>\n                        <div className='user-answers'>\n                            {quizState.currentAnswers.map((user)=>(\n                                <div className={`user-answer ${user.correct ? 'correct' : ''}`} >\n                                    <h3>{user.name}</h3>\n                                    <h1 className={`${user.correct ? 'correct' : ''}`}>{user.answer}</h1>\n                                </div>\n                            ))}\n                            </div>\n                            <Countdown />             \n                     </div>\n                } \n      </div>\n\n    )\n}","import React from 'react'\nimport './WinScreen.scss'\nexport default function WinScreen({winner}){\n    return (\n        <div className='win-screen'>\n            <h1>AND THE WINNER IS!</h1>\n            <img src={winner.icon} />\n            <h1>{winner.name}</h1>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.scss';\nimport Race from './Components/Race/Race';\nimport PlayerBet from './Components/PlayerBet/PlayerBet'\nimport {useQuiz} from './Hooks/useQuiz.js'\nimport {usePlayer} from './Hooks/usePlayer.js'\n\nimport PlayerSelectScreen from './Components/PlayerSelectScreen/PlayerSelectScreen'\nimport GameScreen from './Components/GameScreen/GameScreen'\nimport WinScreen from './Components/WinScreen/WinScreen';\n\nfunction App() {\n  const [player, setPlayer] = usePlayer(null)\n  const [bet, setBet] =  useState(\"coast\")\n  const [quizState, submitAnswer]  = useQuiz()\n\n\n\n  const onSubmitAnswer = (answer)=>{\n    \n    submitAnswer(player, bet ,answer === quizState.currentQuestion.correctAnswer ,answer )\n  } \n\n\n  return (\n    \n    <div className=\"App\">\n      { (quizState && quizState.currentState === 'wait_to_start') && \n        <PlayerSelectScreen players={quizState.players} \n                            selectedPlayer={player} \n                            onPlayerSelect={setPlayer}/>\n      }\n      { (quizState && ['show_question', 'show_answer'].includes(quizState.currentState) ) &&\n        <GameScreen bet={bet} onSetBet ={setBet} onSubmitAnswer={onSubmitAnswer} quizState={quizState} player={player} />\n      }\n      {(quizState && quizState.currentState === 'show_winner') &&\n        <WinScreen winner={quizState.winner}/>\n      }\n      {!quizState &&\n        <h1>Loading...</h1>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}